import { Api, JsonRpc } from "eosjs";
import { Action } from "eosjs/dist/eosjs-serialize";
import { TransactResult } from "eosjs/dist/eosjs-api-interfaces";
import { ReadOnlyTransactResult, PushTransactionArgs, GetInfoResult } from "eosjs/dist/eosjs-rpc-interfaces";
import { Account } from "./account";
import { Asset, Symbol as TokenSymbol } from "./asset";
import { Time } from "./time";
import { System } from "./system";
export declare class Chain {
    coreSymbol: TokenSymbol;
    tokenSupply: Asset;
    api: any;
    rpc: JsonRpc;
    accounts: Account[];
    port: number;
    systemContractEnable: boolean;
    time: Time;
    system: System;
    constructor(rpc: JsonRpc, api: Api, port: number, tokenSymbol: string);
    static validateChainName(chainName: string): void;
    static setupChain(chainName: string): Promise<Chain>;
    clear(): Promise<void>;
    getInfo(): Promise<GetInfoResult>;
    headBlockNum(): Promise<number>;
    isNodeStartUp(): Promise<boolean>;
    isProducingBlock(): Promise<boolean>;
    pushAction(action: Action, broadcast?: boolean, sign?: boolean, tapos?: Object): Promise<TransactResult | ReadOnlyTransactResult | PushTransactionArgs>;
    pushActions(actions: Action[], broadcast?: boolean, sign?: boolean, tapos?: Object): Promise<TransactResult | ReadOnlyTransactResult | PushTransactionArgs>;
    waitTillNextBlock(numBlocks?: number): Promise<{
        startingBlock: GetInfoResult;
        elapsedBlocks: number;
    }>;
    waitTillBlock(target: number): Promise<number>;
    private initializeTestAccounts;
    private createTestAccounts;
    private waitForChainStart;
    private getChainTokenDecimal;
}

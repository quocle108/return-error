"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectBalance = exports.expectAction = exports.getAllActions = exports.expectThrow = void 0;
async function expectThrow(promise, message) {
    try {
        await promise;
    }
    catch (e) {
        if (e.toString().includes(message)) {
            return true;
        }
        throw new Error(`Expect to throw ${message} but got ${e.toString()}`);
    }
    throw new Error(`Expect to throw but execute successfully`);
}
exports.expectThrow = expectThrow;
function getAllActions(actionTraces) {
    let actions = [];
    for (const a of actionTraces) {
        actions.push({
            receiver: a.receiver,
            name: a.act.name,
            data: a.act.data,
            authorization: a.act.authorization,
        });
        actions = actions.concat(getAllActions(a.inline_traces || []));
    }
    return actions;
}
exports.getAllActions = getAllActions;
function isContainedIn(superObj, subObj) {
    return Object.keys(subObj).every((ele) => {
        if (typeof subObj[ele] == "object") {
            return isContainedIn(superObj[ele], subObj[ele]);
        }
        return subObj[ele] === superObj[ele];
    });
}
;
async function expectAction(transaction, code, actionName, data, authorization) {
    const expectedAction = {
        receiver: code,
        name: actionName,
        data,
        authorization,
    };
    const traces = getAllActions(transaction.processed.action_traces);
    for (const action of traces) {
        if (action.receiver === code && action.name === actionName) {
            if (!(data || authorization)) {
                return true;
            }
            else if (data) {
                if (isContainedIn(action.data, data))
                    return true;
            }
            else if (authorization) {
                if (JSON.stringify(action.authorization) === JSON.stringify(authorization))
                    return true;
            }
        }
    }
    throw new Error(`Expected: ${JSON.stringify(expectedAction)} \nReceived: ${JSON.stringify(traces)}`);
}
exports.expectAction = expectAction;
async function expectBalance(account, expectedBalance) {
    const accountBalance = await account.getBalance();
    if (accountBalance.toString() !== expectedBalance.toString()) {
        throw new Error(`Account ${account.name} balance expected ${expectedBalance} to be ${accountBalance}`);
    }
}
exports.expectBalance = expectBalance;
//# sourceMappingURL=assertion.js.map
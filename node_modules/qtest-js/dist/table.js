"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const eosjs_serialize_1 = require("eosjs/dist/eosjs-serialize");
class Table {
    name;
    account;
    serializer;
    constructor(name, account, serializer) {
        this.name = name;
        this.account = account;
        this.serializer = serializer;
    }
    async get(option) {
        return this.account.chain.rpc.get_table_rows({
            json: true,
            code: this.account.name,
            table: this.name,
            ...option,
        });
    }
    async getRows(option) {
        const result = await this.account.chain.rpc.get_table_rows({
            json: true,
            code: this.account.name,
            table: this.name,
            ...option,
        });
        return result.rows;
    }
    async getFirstRow(option) {
        const result = await this.account.chain.rpc.get_table_rows({
            json: true,
            code: this.account.name,
            table: this.name,
            limit: 1,
            reverse: false,
            ...option,
        });
        return result.rows.length > 0 ? result.rows[0] : {};
    }
    async getLastRow(option) {
        const result = await this.account.chain.rpc.get_table_rows({
            json: true,
            code: this.account.name,
            table: this.name,
            limit: 1,
            reverse: true,
            ...option,
        });
        return result.rows.length > 0 ? result.rows[0] : {};
    }
    async insert(scopeRowsData) {
        if (!this.account.contract.action.eosinsert) {
            throw new Error("Contract does not allow to insert data");
        }
        const actionData = [];
        for (const scope of Object.keys(scopeRowsData)) {
            for (const rows of scopeRowsData[scope]) {
                const buffer = new eosjs_serialize_1.SerialBuffer({
                    textEncoder: new TextEncoder(),
                    textDecoder: new TextDecoder(),
                });
                this.serializer.serialize(buffer, rows);
                actionData.push({
                    table_name: this.name,
                    scope,
                    row_data: buffer.asUint8Array(),
                });
            }
        }
        return this.account.contract.action.eosinsert({
            payload: actionData,
        }, [
            {
                actor: "eosio",
                permission: "active",
            },
        ]);
    }
    async modify(scopeRowsData) {
        if (!this.account.contract.action.eosmodify) {
            throw new Error("Contract does not allow to insert data");
        }
        const actionData = [];
        for (const scope of Object.keys(scopeRowsData)) {
            for (const rows of scopeRowsData[scope]) {
                const buffer = new eosjs_serialize_1.SerialBuffer({
                    textEncoder: new TextEncoder(),
                    textDecoder: new TextDecoder(),
                });
                this.serializer.serialize(buffer, rows);
                actionData.push({
                    table_name: this.name,
                    scope,
                    row_data: buffer.asUint8Array(),
                });
            }
        }
        return this.account.contract.action.eosmodify({
            payload: actionData,
        }, [
            {
                actor: "eosio",
                permission: "active",
            },
        ]);
    }
    async erase(scopeRowsData) {
        if (!this.account.contract.action.eoserase) {
            throw new Error("Contract does not allow to insert data");
        }
        const actionData = [];
        for (const scope of Object.keys(scopeRowsData)) {
            for (const rows of scopeRowsData[scope]) {
                const buffer = new eosjs_serialize_1.SerialBuffer({
                    textEncoder: new TextEncoder(),
                    textDecoder: new TextDecoder(),
                });
                this.serializer.serialize(buffer, rows);
                actionData.push({
                    table_name: this.name,
                    scope,
                    row_data: buffer.asUint8Array(),
                });
            }
        }
        return this.account.contract.action.eoserase({
            payload: actionData,
        }, [
            {
                actor: "eosio",
                permission: "active",
            },
        ]);
    }
}
exports.Table = Table;
//# sourceMappingURL=table.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.System = void 0;
const account_1 = require("./account");
const wallet_1 = require("./wallet");
const utils_1 = require("./utils");
class System {
    chain;
    constructor(chain) {
        this.chain = chain;
    }
    async createAccounts(accounts, supplyAmount = this.chain.coreSymbol.convertAssetString(100)) {
        const requests = accounts.map((account) => this.createAccount(account, supplyAmount));
        return Promise.all(requests);
    }
    async createAccount(account, supplyAmount = this.chain.coreSymbol.convertAssetString(100), bytes = 1024 * 1024) {
        let createAccountActions = [
            {
                account: "eosio",
                name: "newaccount",
                authorization: [
                    {
                        actor: "eosio",
                        permission: "active",
                    },
                ],
                data: {
                    creator: "eosio",
                    name: account,
                    owner: {
                        threshold: 1,
                        keys: [
                            {
                                key: wallet_1.signatureProvider.availableKeys[0],
                                weight: 1,
                            },
                        ],
                        accounts: [],
                        waits: [],
                    },
                    active: {
                        threshold: 1,
                        keys: [
                            {
                                key: wallet_1.signatureProvider.availableKeys[0],
                                weight: 1,
                            },
                        ],
                        accounts: [],
                        waits: [],
                    },
                },
            },
        ];
        if (this.chain.systemContractEnable) {
            createAccountActions = createAccountActions.concat([
                {
                    account: "eosio",
                    name: "buyrambytes",
                    authorization: [
                        {
                            actor: "eosio",
                            permission: "active",
                        },
                    ],
                    data: {
                        payer: "eosio",
                        receiver: account,
                        bytes,
                    },
                },
                {
                    account: "eosio",
                    name: "delegatebw",
                    authorization: [
                        {
                            actor: "eosio",
                            permission: "active",
                        },
                    ],
                    data: {
                        from: "eosio",
                        receiver: account,
                        stake_net_quantity: this.chain.coreSymbol.convertAssetString(10),
                        stake_cpu_quantity: this.chain.coreSymbol.convertAssetString(10),
                        transfer: 1,
                    },
                },
            ]);
        }
        if (supplyAmount !== this.chain.coreSymbol.convertAssetString(0)) {
            createAccountActions.push({
                account: "eosio.token",
                name: "transfer",
                authorization: [
                    {
                        actor: "eosio",
                        permission: "active",
                    },
                ],
                data: {
                    from: "eosio",
                    to: account,
                    quantity: supplyAmount,
                    memo: "supply to test account",
                },
            });
        }
        await this.chain.api.transact({
            actions: createAccountActions,
        }, (0, utils_1.generateTapos)());
        return new account_1.Account(this.chain, account);
    }
    async fromAccount(accountName) {
        try {
            await this.chain.rpc.get_account(accountName);
            const account = new account_1.Account(this.chain, accountName);
            const { code_hash } = await this.chain.rpc.get_code_hash(accountName);
            if (code_hash !==
                "0000000000000000000000000000000000000000000000000000000000000000") {
                await account.loadContract();
            }
            return account;
        }
        catch (e) {
            throw e;
        }
    }
}
exports.System = System;
//# sourceMappingURL=system.js.map
import { Asset } from "./asset";
import { Chain } from "./chain";
import { Contract } from "./contract";
import { TransactResult } from "eosjs/dist/eosjs-api-interfaces";
import { GetAccountResult } from "eosjs/dist/eosjs-rpc-interfaces";
export interface KeyWeight {
    key: string;
    weight: number;
}
export interface PermissionLevel {
    actor: string;
    permission: number;
}
export interface PermissionLevelWeight {
    permission: PermissionLevel;
    weight: number;
}
export interface WaitWeight {
    wait_sec: number;
    weight: number;
}
export interface ContractPath {
    abi: string;
    wasm: string;
}
export declare class Account {
    name: string;
    chain: Chain;
    contract: Contract;
    constructor(chain: Chain, name: string);
    updateAuth(permission: string, parent: string, threshold: number, keys: KeyWeight[], accounts: PermissionLevelWeight, waits?: WaitWeight[]): Promise<TransactResult>;
    getInfo(): Promise<GetAccountResult>;
    getBalance(): Promise<Asset>;
    addAuth(permission: string, parent: string): Promise<TransactResult>;
    linkAuth(code: string, type: string, permission: string): Promise<TransactResult>;
    addCode(permission: string): Promise<TransactResult>;
    transfer(to: string, quantity: string, memo?: string): Promise<TransactResult>;
    setContract(contractPath: ContractPath): Promise<Contract>;
    loadContract(): Promise<Contract>;
}
